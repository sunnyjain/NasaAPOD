// Generated by Dagger (https://google.github.io/dagger).
package com.example.nasapod.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

public final class AppModule_ProvidesCompositeDisposableBagFactory
    implements Factory<CompositeDisposable> {
  private final AppModule module;

  public AppModule_ProvidesCompositeDisposableBagFactory(AppModule module) {
    this.module = module;
  }

  @Override
  public CompositeDisposable get() {
    return provideInstance(module);
  }

  public static CompositeDisposable provideInstance(AppModule module) {
    return proxyProvidesCompositeDisposableBag(module);
  }

  public static AppModule_ProvidesCompositeDisposableBagFactory create(AppModule module) {
    return new AppModule_ProvidesCompositeDisposableBagFactory(module);
  }

  public static CompositeDisposable proxyProvidesCompositeDisposableBag(AppModule instance) {
    return Preconditions.checkNotNull(
        instance.providesCompositeDisposableBag(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
