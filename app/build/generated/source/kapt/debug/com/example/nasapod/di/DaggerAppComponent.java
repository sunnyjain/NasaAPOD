// Generated by Dagger (https://google.github.io/dagger).
package com.example.nasapod.di;

import android.app.Activity;
import android.app.Application;
import androidx.fragment.app.Fragment;
import com.example.nasapod.Appcontroller;
import com.example.nasapod.Appcontroller_MembersInjector;
import com.example.nasapod.MainActivity;
import com.example.nasapod.MainActivity_MembersInjector;
import com.example.nasapod.detail.ui.APODDetailListApdapter;
import com.example.nasapod.detail.ui.APODDetailView;
import com.example.nasapod.detail.ui.APODDetailView_MembersInjector;
import com.example.nasapod.list.ui.APODListAdapter;
import com.example.nasapod.list.ui.PODListView;
import com.example.nasapod.list.ui.PODListView_MembersInjector;
import com.squareup.picasso.Picasso;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Picasso> providesPicassoProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.providesPicassoProvider =
        DoubleCheck.provider(AppModule_ProvidesPicassoFactory.create(builder.appModule));
  }

  @Override
  public void inject(Appcontroller app) {
    injectAppcontroller(app);
  }

  private Appcontroller injectAppcontroller(Appcontroller instance) {
    Appcontroller_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<
            FragmentBuilderModule_ContributePODSListViewFragment.PODListViewSubcomponent.Builder>
        pODListViewSubcomponentBuilderProvider;

    private Provider<
            FragmentBuilderModule_ContributeAPODDetailViewFragment.APODDetailViewSubcomponent
                .Builder>
        aPODDetailViewSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(2)
          .put(PODListView.class, (Provider) pODListViewSubcomponentBuilderProvider)
          .put(APODDetailView.class, (Provider) aPODDetailViewSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.pODListViewSubcomponentBuilderProvider =
          new Provider<
              FragmentBuilderModule_ContributePODSListViewFragment.PODListViewSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuilderModule_ContributePODSListViewFragment.PODListViewSubcomponent
                    .Builder
                get() {
              return new PODListViewSubcomponentBuilder();
            }
          };
      this.aPODDetailViewSubcomponentBuilderProvider =
          new Provider<
              FragmentBuilderModule_ContributeAPODDetailViewFragment.APODDetailViewSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuilderModule_ContributeAPODDetailViewFragment.APODDetailViewSubcomponent
                    .Builder
                get() {
              return new APODDetailViewSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class PODListViewSubcomponentBuilder
        extends FragmentBuilderModule_ContributePODSListViewFragment.PODListViewSubcomponent
            .Builder {
      private PODListView seedInstance;

      @Override
      public FragmentBuilderModule_ContributePODSListViewFragment.PODListViewSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(PODListView.class.getCanonicalName() + " must be set");
        }
        return new PODListViewSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(PODListView arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PODListViewSubcomponentImpl
        implements FragmentBuilderModule_ContributePODSListViewFragment.PODListViewSubcomponent {
      private PODListView seedInstance;

      private PODListViewSubcomponentImpl(PODListViewSubcomponentBuilder builder) {
        initialize(builder);
      }

      private APODListAdapter getAPODListAdapter() {
        return new APODListAdapter(
            DaggerAppComponent.this.providesPicassoProvider.get(), seedInstance);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PODListViewSubcomponentBuilder builder) {
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(PODListView arg0) {
        injectPODListView(arg0);
      }

      private PODListView injectPODListView(PODListView instance) {
        PODListView_MembersInjector.injectAdapter(instance, getAPODListAdapter());
        return instance;
      }
    }

    private final class APODDetailViewSubcomponentBuilder
        extends FragmentBuilderModule_ContributeAPODDetailViewFragment.APODDetailViewSubcomponent
            .Builder {
      private APODDetailView seedInstance;

      @Override
      public FragmentBuilderModule_ContributeAPODDetailViewFragment.APODDetailViewSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(APODDetailView.class.getCanonicalName() + " must be set");
        }
        return new APODDetailViewSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(APODDetailView arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class APODDetailViewSubcomponentImpl
        implements FragmentBuilderModule_ContributeAPODDetailViewFragment
            .APODDetailViewSubcomponent {
      private APODDetailView seedInstance;

      private APODDetailViewSubcomponentImpl(APODDetailViewSubcomponentBuilder builder) {
        initialize(builder);
      }

      private APODDetailListApdapter getAPODDetailListApdapter() {
        return new APODDetailListApdapter(
            DaggerAppComponent.this.providesPicassoProvider.get(), seedInstance);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final APODDetailViewSubcomponentBuilder builder) {
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(APODDetailView arg0) {
        injectAPODDetailView(arg0);
      }

      private APODDetailView injectAPODDetailView(APODDetailView instance) {
        APODDetailView_MembersInjector.injectAdapter(instance, getAPODDetailListApdapter());
        return instance;
      }
    }
  }
}
